---
# All rights reserved (c) 2023, Vladimir Botka <vbotka@gmail.com>
# Simplified BSD License, https://opensource.org/licenses/BSD-2-Clause

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# linux_lib: install_package
#
# Description:
#
#   Depending on the OS, use Ansible module package, yum, or apt to
#   install a list of packages.
#
# Input:
#
#   ll_ipkg_list .................. list of packages (mandatory)
#   ll_ipkg_state ................. apt/yum/package state (default=omit)
#   ll_ipkg_autoremove ............ apt/yum autoremove (default=omit)
#   ll_ipkg_sanity ................ enable sanity check (default=true)
#   ll_ipkg_sanity_quiet .......... quiet sanity check (default=true)
#   ll_ipkg_retries ............... number of retries before giving up in a until loop (default=5)
#   ll_ipkg_delay ................. number of seconds to delay between retries (default=2)
#   ll_ipkg_rescue_end_host ....... end host on error (default=true)
#   ll_debug ...................... display debug output (default=false)
#
# Output: None
#
# Notes:
#
#   * Ansible module package will be used if the variable
#     ansible_os_family is not defined
#
# Example:
#
#   vars:
#
#     list_of_packages: [gnupg, gpg, gpg-agent]
#
#   tasks:
#
#     - include_role:
#         name: vbotka.linux_lib
#         tasks_from: install_package
#       vars:
#         ll_ipkg_list: "{{ list_of_packages }}"
#         ll_ipkg_state: "{{ lp_package_state }}"
#         ll_ipkg_autoremove: "{{ lp_packages_autoremove|bool }}"
#         ll_debug: "{{ lp_packages_debug|bool }}"
#
# See: vbotka.linux_postinstall defaults/main/packages.yml, common.yml
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# https://github.com/vbotka/linux-lib/blob/master/tasks/install_package.yml

- name: "ll install_package: Sanity ll_ipkg_list is defined."
  ansible.builtin.assert:
    that: ll_ipkg_list is defined
    fail_msg: "[ERR] Mandatory variable ll_ipkg_list not defined."
    success_msg: "[OK]  Mandatory variable ll_ipkg_list is defined."
    quiet: ll_ipkg_sanity_quiet|d(true)|bool
  when: ll_ipkg_sanity|d(true)|bool

- name: "ll install_package: Debug"
  vars:
    msg: |-
      ansible_architecture: {{ ansible_architecture|d('UNDEFINED') }}
      ansible_os_family: {{ ansible_os_family|d('UNDEFINED') }}
      ansible_distribution: {{ ansible_distribution|d('UNDEFINED') }}
      ansible_distribution_major_version: {{ ansible_distribution_major_version|d('UNDEFINED') }}
      ansible_distribution_version: {{ ansible_distribution_version|d('UNDEFINED') }}
      ansible_distribution_release: {{ ansible_distribution_release|d('UNDEFINED') }}
      ansible_python_version: {{ ansible_python_version|d('UNDEFINED') }}

      ll_ipkg_list: {{ ll_ipkg_list }}
      ll_ipkg_state: {{ ll_ipkg_state|d('UNDEFINED') }}
      ll_ipkg_autoremove: {{ ll_ipkg_autoremove|d('UNDEFINED') }}
      ll_ipkg_sanity: {{ ll_ipkg_sanity }}
      ll_ipkg_sanity_quiet: {{ ll_ipkg_sanity_quiet }}
      ll_ipkg_retries: {{ ll_ipkg_retries }}
      ll_ipkg_delay: {{ ll_ipkg_delay }}
      ll_ipkg_rescue_end_host: {{ ll_ipkg_rescue_end_host }}

  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"
  when: ll_debug|bool

- name: Install package
  block:

    - name: "ll install_package: Install (apt)"
      ansible.builtin.apt:
        name: "{{ ll_ipkg_list }}"
        state: "{{ ll_ipkg_state|d(omit) }}"
        autoremove: "{{ ll_ipkg_autoremove|d(omit) }}"
      register: result
      until: result is succeeded
      retries: "{{ ll_ipkg_retries }}"
      delay: "{{ ll_ipkg_delay }}"
      when: ansible_os_family|d('UNDEFINED') == 'Debian'

    - name: "ll install_package: Install (yum)"
      ansible.builtin.yum:
        name: "{{ ll_ipkg_list }}"
        state: "{{ lp_install_package_state|d(omit) }}"
        autoremove: "{{ ll_ipkg_autoremove|d(omit) }}"
      register: result
      until: result is succeeded
      retries: "{{ ll_ipkg_retries }}"
      delay: "{{ ll_ipkg_delay }}"
      when: ansible_os_family|d('UNDEFINED') == 'RedHat'

    - name: "ll install_package: Install (package)"
      ansible.builtin.package:
        name: "{{ item }}"
        state: "{{ lp_install_package_state|d(omit) }}"
      loop: "{{ ll_ipkg_list }}"
      register: result
      until: result is succeeded
      retries: "{{ ll_ipkg_retries }}"
      delay: "{{ ll_ipkg_delay }}"
      when: ansible_os_family|d('UNDEFINED') not in ['Debian', 'RedHat']

    - name: "ll install_package: Debug result"
      ansible.builtin.debug:
        var: result
      when: ll_debug|bool

  rescue:

    - name: "ll install_package: Rescue debug"
      ansible.builtin.debug:
        msg: |
          [ERR] task {{ ansible_failed_task.name }} failed. End host.
          ansible_failed_task:
            {{ ansible_failed_task|to_yaml(indent=2)|indent(2) }}
          ansible_failed_result:
            {{ ansible_failed_result|to_yaml(indent=2)|indent(2) }}

    - name: "ll install_package: Rescue end host"
      ansible.builtin.meta: end_host
      when: ll_ipkg_rescue_end_host|bool

# EOF
...
